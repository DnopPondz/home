"use client"

import React, { useState } from 'react';
import { User, Phone, MapPin, Clock, CheckCircle, X } from 'lucide-react';

const Service = () => {
    const [jobs, setJobs] = useState([
        {
            id: 1,
            customerName: "‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏•‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß",
            jobType: "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 9,000 - 18,000 BTU, ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
            address: "444/4 ‡∏ñ‡∏ô‡∏ô‡πÇ‡∏ä‡∏ï‡∏ô‡∏≤ ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô ‡∏à‡∏á‡∏≠‡∏£‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
            jobCode: "AD04071205",
            price: "1,550.00 ‡∏ø",
            status: "pending",
            timestamp: "25/04/2563 ‡πÄ‡∏ß‡∏•‡∏≤ 13:00 ‡∏ô.",
            hasNote: true,
            isVerified: false
        },
        {
            id: 2,
            customerName: "‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏•‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß",
            jobType: "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 9,000 - 18,000 BTU, ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
            address: "444/4 ‡∏ñ‡∏ô‡∏ô‡πÇ‡∏ä‡∏ï‡∏ô‡∏≤ ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô ‡∏à‡∏á‡∏≠‡∏£‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
            jobCode: "AD04071205",
            price: "1,550.00 ‡∏ø",
            status: "pending",
            timestamp: "26/04/2563 ‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô.",
            hasNote: true,
            isVerified: true
        },
        {
            id: 3,
            customerName: "‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏•‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß",
            jobType: "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 9,000 - 18,000 BTU, ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
            address: "444/4 ‡∏ñ‡∏ô‡∏ô‡πÇ‡∏ä‡∏ï‡∏ô‡∏≤ ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô ‡∏à‡∏á‡∏≠‡∏£‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
            jobCode: "AD04071205",
            price: "1,550.00 ‡∏ø",
            status: "pending",
            timestamp: "25/04/2563 ‡πÄ‡∏ß‡∏•‡∏≤ 13:00 ‡∏ô.",
            hasNote: true,
            isVerified: false
        }
    ]);

    const [showPopup, setShowPopup] = useState(false);
    const [popupData, setPopupData] = useState(null);

    const handleAcceptJob = (job) => {
        setPopupData({
            type: 'accept',
            title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô?',
            message: `‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà "${job.jobType}" ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${job.timestamp}`,
            job: job
        });
        setShowPopup(true);
    };

    const handleRejectJob = (job) => {
        setPopupData({
            type: 'reject',
            title: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô?',
            message: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ "${job.jobType}" ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${job.timestamp}`,
            job: job
        });
        setShowPopup(true);
    };

    const handleCompleteJob = (job) => {
        setPopupData({
            type: 'complete',
            title: '‡∏à‡∏ö‡∏á‡∏≤‡∏ô?',
            message: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ "${job.jobType}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà`,
            job: job
        });
        setShowPopup(true);
    };

    const confirmAction = () => {
        if (popupData.type === 'accept') {
            setJobs(jobs.map(job => 
                job.id === popupData.job.id ? { ...job, status: 'accepted' } : job
            ));
        } else if (popupData.type === 'reject') {
            setJobs(jobs.filter(job => job.id !== popupData.job.id));
        } else if (popupData.type === 'complete') {
            setJobs(jobs.filter(job => job.id !== popupData.job.id));
        }
        setShowPopup(false);
        setPopupData(null);
    };

    const cancelAction = () => {
        setShowPopup(false);
        setPopupData(null);
    };

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-white shadow-sm border-b">
                <div className="max-w-4xl mx-auto px-4 py-4">
                    <div className="flex items-center justify-between">
                        <h1 className="text-xl font-semibold text-gray-800">‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏ß‡∏á</h1>
                        <div className="flex items-center space-x-2 text-sm text-gray-600">
                            <User className="w-4 h-4" />
                            <span>‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏£‡πå‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏∏‡∏ì</span>
                            <span className="text-blue-600">332 ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</span>
                        </div>
                    </div>
                </div>
            </div>

            {/* Notification Banner */}
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mx-4 mt-4 rounded-r-lg">
                <div className="flex items-center">
                    <User className="w-5 h-5 text-blue-600 mr-2" />
                    <div className="text-sm">
                        <span className="text-blue-800">‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏£‡πå‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏∏‡∏ì</span>
                        <span className="text-blue-600 ml-2">332 ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô ‡∏à‡∏á‡∏≠‡∏£‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û</span>
                    </div>
                    <button className="ml-auto bg-blue-600 text-white px-4 py-1 rounded-full text-sm">
                        ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                    </button>
                </div>
            </div>

            {/* Job Cards */}
            <div className="max-w-4xl mx-auto px-4 py-6 space-y-4">
                {jobs.map((job) => (
                    <div key={job.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <div className="flex justify-between items-start mb-4">
                            <h3 className="text-lg font-semibold text-gray-800">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏≠‡∏£‡πå</h3>
                            <div className="flex items-center text-sm text-gray-500">
                                <Clock className="w-4 h-4 mr-1" />
                                <span>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {job.timestamp}</span>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div className="space-y-2">
                                <div className="flex items-start">
                                    <span className="text-sm text-gray-600 w-20 flex-shrink-0">‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏£‡πâ‡∏≠‡∏á</span>
                                    <span className="text-sm text-gray-800">{job.jobType}</span>
                                </div>
                                <div className="flex items-start">
                                    <span className="text-sm text-gray-600 w-20 flex-shrink-0">‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</span>
                                    <span className="text-sm text-gray-800">{job.jobCode}</span>
                                </div>
                                <div className="flex items-start">
                                    <span className="text-sm text-gray-600 w-20 flex-shrink-0">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°</span>
                                    <span className="text-sm font-semibold text-gray-800">{job.price}</span>
                                </div>
                            </div>
                            <div className="space-y-2">
                                <div className="flex items-start">
                                    <MapPin className="w-4 h-4 text-gray-600 mr-2 mt-0.5 flex-shrink-0" />
                                    <span className="text-sm text-gray-800">{job.address}</span>
                                </div>
                            </div>
                        </div>

                        <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                                <button className="flex items-center text-blue-600 text-sm">
                                    <Phone className="w-4 h-4 mr-1" />
                                    ‡πÇ‡∏ó‡∏£‡∏´‡∏≤
                                </button>
                                {job.hasNote && (
                                    <button className="text-blue-600 text-sm">
                                        üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                    </button>
                                )}
                                {job.isVerified && (
                                    <div className="flex items-center text-green-600 text-sm">
                                        <CheckCircle className="w-4 h-4 mr-1" />
                                        ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                                    </div>
                                )}
                            </div>
                            <div className="flex space-x-2">
                                {job.status === 'pending' && (
                                    <>
                                        <button 
                                            onClick={() => handleRejectJob(job)}
                                            className="px-4 py-2 border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-gray-50 transition-colors"
                                        >
                                            ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                                        </button>
                                        <button 
                                            onClick={() => handleAcceptJob(job)}
                                            className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                                        >
                                            ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
                                        </button>
                                    </>
                                )}
                                {job.status === 'accepted' && (
                                    <button 
                                        onClick={() => handleCompleteJob(job)}
                                        className="px-4 py-2 bg-green-600 text-white rounded-lg text-sm hover:bg-green-700 transition-colors"
                                    >
                                        ‡∏à‡∏ö‡∏á‡∏≤‡∏ô
                                    </button>
                                )}
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Summary Stats */}
            <div className="max-w-4xl mx-auto px-4 py-6">
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4">‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-blue-600">
                                {jobs.filter(job => job.status === 'pending').length}
                            </div>
                            <div className="text-sm text-gray-600">‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö</div>
                        </div>
                        <div className="text-center">
                            <div className="text-2xl font-bold text-green-600">
                                {jobs.filter(job => job.status === 'accepted').length}
                            </div>
                            <div className="text-sm text-gray-600">‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</div>
                        </div>
                        <div className="text-center">
                            <div className="text-2xl font-bold text-orange-600">
                                {jobs.length}
                            </div>
                            <div className="text-sm text-gray-600">‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Popup Modal */}
            {showPopup && (
                <div className="fixed inset-0  bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 max-w-md w-mx-4 relative">
                        <button 
                            onClick={cancelAction}
                            className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
                        >
                            <X className="w-5 h-5" />
                        </button>
                        
                        <div className="text-center mb-6">
                            <div className="w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center">
                                {popupData.type === 'accept' && <CheckCircle className="w-8 h-8 text-blue-600" />}
                                {popupData.type === 'reject' && <X className="w-8 h-8 text-red-600" />}
                                {popupData.type === 'complete' && <CheckCircle className="w-8 h-8 text-green-600" />}
                            </div>
                            <h3 className="text-lg font-semibold text-gray-800 mb-2">
                                {popupData.title}
                            </h3>
                            <p className="text-sm text-gray-600">
                                {popupData.message}
                            </p>
                        </div>
                        
                        <div className="flex space-x-3">
                            <button 
                                onClick={cancelAction}
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-gray-50"
                            >
                                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                            <button 
                                onClick={confirmAction}
                                className={`flex-1 px-4 py-2 rounded-lg text-sm text-white ${
                                    popupData.type === 'accept' ? 'bg-blue-600 hover:bg-blue-700' :
                                    popupData.type === 'reject' ? 'bg-red-600 hover:bg-red-700' :
                                    'bg-green-600 hover:bg-green-700'
                                }`}
                            >
                                {popupData.type === 'accept' ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' : 
                                 popupData.type === 'reject' ? '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' : '‡∏à‡∏ö‡∏á‡∏≤‡∏ô'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Service;